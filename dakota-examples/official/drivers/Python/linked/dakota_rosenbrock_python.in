# Dakota/Python linked interface demonstration
#  * Requires Dakota compiled with and linked against Python
#  * Exercise the Python interface using list or numpy

method,						
	optpp_newton
	  max_iterations = 50			
	  convergence_tolerance = 1e-4

variables,					
	continuous_design = 2			
	  cdv_initial_point  -1.2  1.0		
	  cdv_lower_bounds   -2.0 -2.0		
	  cdv_upper_bounds    2.0  2.0		
	  cdv_descriptor      'x1' 'x2'

interface,							
	python
# the current analysis driver format is module:function	
# use this for the list method of passing the data		
	  analysis_drivers = 'rosenbrock:rosenbrock_list'
# use this for the numpy array method of passing the data	
#	  analysis_drivers = 'rosenbrock:rosenbrock_numpy'
#           numpy
#	  analysis_components = 'optarg1'

responses,				
	num_objective_functions = 1	
	analytic_gradients		
	analytic_hessians
