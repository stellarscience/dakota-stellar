Blurb::
Multi-Start Optimization Method
Description::
In the multi-start iteration method (\c multi_start), a series of
iterator runs are performed for different values of parameters in the
model. A common use is for multi-start optimization (i.e., different
local optimization runs from different starting points for the design
variables), but the concept and the code are more general.
Multi-start iteration is implemented within the MetaIterator branch of
the Iterator hierarchy within the ConcurrentMetaIterator class.
Additional information on the multi-start algorithm is available in
the Users Manual \cite UsersMan.

The \c multi_start meta-iterator must specify a sub-iterator using
either a \c method_pointer or a \c method_name plus optional \c
model_pointer. This iterator is responsible for completing a series
of iterative analyses from a set of different starting points. These
starting points can be specified as follows: (1) using \c
random_starts, for which the specified number of starting points are
selected randomly within the variable bounds, (2) using \c
starting_points, in which the starting values are provided in a list,
or (3) using both \c random_starts and \c starting_points, for which
the combined set of points will be used. In aggregate, at least one
starting point must be specified. The most common example of a
multi-start algorithm is multi-start optimization, in which a series
of optimizations are performed from different starting values for the
design variables. This can be an effective approach for problems with
multiple minima.

<b>Expected HDF5 Output</b> 

If Dakota was built with HDF5 support and run with the 
\ref environment-results_output-hdf5 keyword, this method 
writes the starting points for each sub-iterator it runs, as well
as the best parameters and responses returned by each sub-iterator.
See the \ref hdf5_results-ms_pareto documentation for details.


Topics::
Examples::
Theory::
Faq::
See_Also::	
