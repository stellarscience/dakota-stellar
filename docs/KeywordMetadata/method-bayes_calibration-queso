Blurb::
Markov Chain Monte Carlo algorithms from the QUESO package

Description::

The \c queso method supports the following MCMC algorithms: DRAM
(Delayed Rejection Adaptive Metropolis), delayed rejection (DR) only,
adaptive metropolis (AM) only, pure Metropolis Hasting (MH)s, and
multilevel (ML).

When calibrating fast-running simulation models, use of an emulator is
not typically warranted.  For slower models, using an emulator model
in the MCMC sampling will greatly improve the speed, since the Monte
Carlo Markov Chain will generate thousands of samples on the emulator
instead of the real simulation code.  An emulator may be specified
with the keyword \c emulator, followed by a \c gaussian_process
emulator, a \c pce emulator (polynomial chaos expansion), or a \c sc
emulator (stochastic collocation). For the \c gaussian_process
emulator, the user must specify whether to use the \c surfpack or \c
dakota version of the Gaussian process.  The user can define the
number of samples \c build_samples from which the emulator should be
built. It is also possible to build the Gaussian process from points
read in from the \c import_points_file and to export
approximation-based sample evaluations using \c
export_points_file. For \c pce or \c sc, the user can define a \c
sparse_grid_level.



There are a variety of ways the user can specify the proposal covariance matrix which 
is very important in governing the samples generated in the chain.  
The proposal covariance specifies the covariance structure of a multivariate normal distribution. 
The user can specify \c proposal_covariance, followed by \c derivatives, \c prior, 
\c values, or \c filename.  The derivative specification involves 
forming the Hessian of the misfit function (the negative
log likelihood).  When derivative information is available inexpensively (e.g. from an emulator), 
the derived-based proposal covariance forms a more
accurate proposal distribution, resulting in lower rejection rates and
faster chain mixing.  The prior setting involves constructing the proposal from the variance of the prior distributions of the parameters being calibrated.  When specifying the proposal covariance with values or from a file, the user 
can choose to specify only the diagonals of the covariance matrix with \c diagonal or to specify the full covariance matrix with \c matrix. 
 
There are two other controls for QUESO. 
The \c pre_solve option enables the user to start the chain at an optimal point, the 
Maximum A Posteriori (MAP) point.  This is the point in parameter space that maximizes 
the log posterior, (defined as the log-likelihood minus the log_prior).  A deterministic optimization method is used to obtain the MAP point, and the MCMC chain is then 
started at the best point found in the optimization.  
The second factor is a \c logit_transform,  
which performs an internal variable transformation from bounded domains to unbounded domains
 in order to reduce sample rejection due to an out-of-bounds condition.

Note that as of Dakota 6.2, the field data capability may be used with QUESO.
That is, the user can specify field simulation data and field experiment data,
and Dakota will interpolate and provide the proper residuals to the Bayesian calibration.

Topics::	bayesian_calibration, package_queso
Examples::
Theory::
Faq::
See_Also::	
