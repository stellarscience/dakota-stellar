#@ TODO REVIEW: Do the reliability methods also need NPSOL?
#@ *: DakotaConfig=HAVE_DOT
# DAKOTA Input File: dakota_rbdo_cantilever_analytic.in
# Fully-analytic bi-level RBDO using the cantilever test function.

environment,
	  method_pointer = 'OPTIM'

###########################
# begin opt specification #
###########################
method,
	id_method = 'OPTIM'
	model_pointer = 'OPTIM_M'
	dot_sqp
#	npsol_sqp
	  convergence_tolerance = 1.e-6
	  output verbose
	scaling

model,
	id_model = 'OPTIM_M'
	nested
	  variables_pointer  = 'OPTIM_V'
	  sub_method_pointer = 'UQ'
	  responses_pointer  = 'OPTIM_R'
	  primary_response_mapping   = 1. 0. 0. 0. 0. 0. 0. 0.
	  secondary_response_mapping = 0. 0. 0. 0. 1. 0. 0. 0.
				       0. 0. 0. 0. 0. 0. 0. 1.

variables,
	id_variables = 'OPTIM_V'
	continuous_design = 2
	  initial_point    2.5    2.5
	  upper_bounds    10.0   10.0
	  lower_bounds     1.0    1.0
	  descriptors 'w' 't'
	scale_type = 'value'
	scales     =       2.5	  2.5

responses,
# minimize mean Weight
# s.t.     p_S/D    <= .001350/.001145 Cases 0,1
# s.t.     beta_S/D >= 3               Cases 2,3
# s.t.     z_S/D    <= 0.              Cases 4,5,6,7
#
# NOTE: This specifies the TOTAL RESPONSE for the optimization,
#       which is a combination of nested & interface responses.
	id_responses = 'OPTIM_R'
	objective_functions = 1
	nonlinear_inequality_constraints = 2
	nonlinear_inequality_upper_bounds = .00135 .00135	#s0,#s1
#	nonlinear_inequality_lower_bounds = 3. 3.		#s2,#s3
#	nonlinear_inequality_upper_bounds = 1.e+50 1.e+50	#s2,#s3
	analytic_gradients
	no_hessians

##########################
# begin UQ specification #
##########################
method,
	id_method = 'UQ'
	model_pointer = 'UQ_M'
	local_reliability #nip
	  mpp_search x_taylor_mpp		#s0,#s2,#s4,#s6
#	  mpp_search no_approx			#s1,#s3,#s5,#s7
	  num_response_levels = 0 1 1		#s0,#s1,#s2,#s3
	  response_levels = 0.0 0.0		#s0,#s1,#s2,#s3
#	  compute gen_reliabilities		#s2,#s3
	  integration second_order
#	  num_probability_levels = 0 1 1	#s4,#s5
#	  probability_levels = .00135 .00135	#s4,#s5
#	  num_gen_reliability_levels = 0 1 1	#s6,#s7
#	  gen_reliability_levels = 3. 3.	#s6,#s7
# g functions scaled using deterministic opt. conventions:
# g<=0 is safe/feasible, g>0 is failed/violated.  Therefore,
# we desire complementary cumulative statistics.
	  complementary distribution

model,
	id_model = 'UQ_M'
	single
	  variables_pointer = 'UQ_V'
	  interface_pointer = 'UQ_I'
	  responses_pointer = 'UQ_R'

variables,
	id_variables = 'UQ_V'
# continuous_design is not required (OUU will augment
# automatically), but it is good form
	continuous_design = 2
	normal_uncertain = 4
	  means             =  40000. 29.E+6 500. 1000.
	  std_deviations    =  2000. 1.45E+6 100. 100.
	  descriptors       =  'R' 'E' 'X' 'Y'

interface,
	id_interface = 'UQ_I'
	direct
	  analysis_driver = 'cantilever'
#	  deactivate evaluation_cache restart_file

responses,
	id_responses = 'UQ_R'
	response_functions = 3
	analytic_gradients
	analytic_hessians
