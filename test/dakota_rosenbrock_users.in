#@ s0: UserMan=rosen_multidim
#@ s1: UserMan=rosen_ps_vector
#@ s2: UserMan=rosen_grad_opt
#@ s4: UserMan=rosen_opt_patternsearch
#@ s5: UserMan=rosen_opt_ea
#@ s6: UserMan=rosen_sampling
#@ s7: UserMan=rosen_syscall
#@ s8: UserMan=rosen_opt_nls
#@ s9: UserMan=rosen_opt_scaled
#@ s4: DakotaConfig=HAVE_ACRO
#@ s5: DakotaConfig=HAVE_ACRO
#@ [taxonomy:start]
#@ s0-1: [analysis:SensitivityAnalysis]
#@ s2: [analysis:Optimization]
#@ s3: [analysis:Calibration]
#@ s4-5: [analysis:Optimization]
#@ s6: [analysis:UQ]
#@ s7: [analysis:Optimization]
#@ s8: [analysis:Calibration]
#@ s9: [analysis:Optimization]
#@ s0-1: [method:ParameterStudy]
#@ s2: [method:ConjugateGradient]
#@ s3: [method:GenericOptimization]
#@ s3: [method:Newton]
#@ s4: [method:Pattern]
#@ s5: [method:GeneticAlgorithm]
#@ s6: [method:Sampling]
#@ s7: [method:ConjugateGradient]
#@ s8: [method:GenericOptimization]
#@ s8: [method:LeastSquares]
#@ s9: [method:ConjugateGradient]
#@ s0-1: [goal:All]
#@ s2-4: [goal:Local]
#@ s3: [goal:ParameterValues]
#@ s5: [goal:Global]
#@ s6: [goal:StatisticalMoments]
#@ s7: [goal:Local]
#@ s8: [goal:ParameterConfidenceIntervals]
#@ s8: [goal:Local]
#@ s9: [goal:Local]
#@ s2-5: [goal:BoundConstraints]
#@ s7-9: [goal:BoundConstraints]
#@ s0-9: [variable:Continuous]
#@ s0-3: [model:Smooth]
#@ s4-5: [model:NonSmooth]
#@ s6-9: [model:Smooth]
#@ s2: [model:EstimatedFirstDerivatives]
#@ s3: [model:FirstDerivatives]
#@ s4-5: [model:NoDerivatives]
#@ s7: [model:EstimatedFirstDerivatives]
#@ s8: [model:FirstDerivatives]
#@ s9: [model:EstimatedFirstDerivatives]
#@ [taxonomy:end]

# Dakota Input File: rosen_multidim.in          	#s0
## Dakota Input File: rosen_ps_vector.in 		      #s1
## Dakota Input File: rosen_grad_opt.in 		      #s2
## Dakota Input File: rosen_opt_patternsearch.in 	#s4
## Dakota Input File: rosen_opt_ea.in 			      #s5
## Dakota Input File: rosen_sampling.in 		      #s6
## Dakota Input File: rosen_syscall.in 			      #s7
## Dakota Input File: rosen_opt_nls.in 			      #s8
## Dakota Input File: rosen_opt_scaled.in		      #s9
# Usage:						                              #s0
#   dakota -i rosen_multidim.in -o rosen_multidim.out > rosen_multidim.stdout #s0
## Usage: 	       		   		      			          #s2
##   dakota -i rosen_grad_opt.in -o rosen_grad_opt.out > rosen_grad_opt.stdout #s2
## Usage: 	       		    		       	 		        #s6
##   dakota -i rosen_sampling.in -o rosen_sampling.out > rosen_sampling.stdout #s6
## Usage:				    	       	 		                #s7
##   dakota -i rosen_syscall.in -o rosen_syscall.out > rosen_syscall.stdout   #s7

environment
  tabular_data
    tabular_data_file = 'rosen_multidim.dat'            #s0
#    tabular_data_file = 'rosen_ps_vector.dat' 		      #s1
#    tabular_data_file = 'rosen_grad_opt.dat' 		      #s2
#    tabular_data_file = 'rosen_opt_patternsearch.dat'	#s4
#    tabular_data_file = 'rosen_opt_ea.dat' 		        #s5
#    tabular_data_file = 'rosen_sampling.dat' 		      #s6
#    tabular_data_file = 'rosen_syscall.dat' 		        #s7
#    tabular_data_file = 'rosen_opt_nls.dat'		        #s8
#    tabular_data_file = 'rosen_opt_scaled.dat'		      #s9

method
  multidim_parameter_study     		    #s0
    partitions = 8 8           		    #s0
#  vector_parameter_study      		    #s1
#    final_point = 1.1  1.3     	    #s1
#    num_steps = 10      		          #s1
#  conmin_frcg        			          #s2,#s7,#s9
#    convergence_tolerance = 1e-4    	#s2,#s7
#    max_iterations = 100             #s2,#s7
#    scaling        			            #s9
#    output verbose      		          #s9
#  optpp_g_newton                     #s3
#    convergence_tolerance = 1e-4    	#s3
#    max_iterations = 100             #s3
#  nl2sol          			              #s8
#    convergence_tolerance = 1e-4    	#s8
#    max_iterations = 100             #s8
#  coliny_pattern_search              #s4
#    initial_delta = 0.5      		  #s4
#    solution_target = 1e-4    	      #s4
#    exploratory_moves                #s4
#      basic_pattern                  #s4
#    contraction_factor = 0.75    	  #s4
#    max_iterations = 1000      	  #s4
#    max_function_evaluations = 2000  #s4
#    variable_tolerance = 1e-4    	  #s4
#  coliny_ea        	  		          #s5
#    max_iterations = 100      		    #s5
#    max_function_evaluations = 2000  #s5
#    seed = 11011011      		        #s5
#    population_size = 50      		    #s5
#    fitness_type merit_function    	#s5
#    mutation_type offset_normal    	#s5
#    mutation_rate 1.0      		      #s5
#    crossover_type two_point    	    #s5
#    crossover_rate 0.0      		      #s5
#    replacement_type chc = 10    	  #s5
#  sampling                    		    #s6
#    sample_type random         	    #s6
#    samples = 200              	    #s6
#    seed = 17                  	    #s6
#    response_levels = 100.0    	    #s6

model
  single

variables
  continuous_design = 2                #s0,#s1,#s2,#s3,#s4,#s5,#s7,#s8,#s9
#    initial_point    -0.3      0.2    #s1
#    initial_point    -1.2      1.0    #s2,#s3,#s7,#s8,#s9
#    initial_point     0.0      0.0    #s4
    lower_bounds     -2.0     -2.0     #s0,#s2,#s3,#s4,#s5,#s7,#s8
#    lower_bounds     -2.0      0.001  #s9
    upper_bounds      2.0      2.0     #s0,#s2,#s3,#s4,#s5,#s7,#s8,#s9
    descriptors       'x1'     "x2"    #s0,#s1,#s2,#s3,#s4,#s5,#s7,#s8,#s9
#    scale_types = 'value' 'log'       #s9
#    scales = 4.0 0.1      	           #s9
#  uniform_uncertain = 2      	       #s6
#    lower_bounds       -2.0  -2.0     #s6
#    upper_bounds        2.0   2.0     #s6
#    descriptors         'x1'  'x2'    #s6

interface
  analysis_drivers = 'rosenbrock'
    direct				#s0,#s1,#s2,#s3,#s4,#s5,#s6,#s8,#s9
#    system
#    fork                             #s7
#    parameters_file = 'params.in'    #s7
#    results_file    = 'results.out'  #s7

responses
#  objective_functions = 1                    #s1,#s2,#s4,#s5,#s7,#s9
#    primary_scale_types = 'value' #s9
#    primary_scales = 50.0  		    #s9
#  calibration_terms = 2       	 		          #s3,#s8
  response_functions = 1			                #s6,#s0
  no_gradients         				                #s0,#s1,#s4,#s5,#s6
##  analytic_gradients      			            #s2
#  numerical_gradients      			            #s2,#s7
#    method_source dakota      			          #s2,#s7
#    interval_type forward      		          #s2,#s7
#    fd_step_size = 1.e-5    		              #s2,#s7
#  analytic_gradients        			            #s3,#s8,#s9
  no_hessians
