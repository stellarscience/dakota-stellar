#@ s*: Label=FastTest
#@ s0: DakotaConfig=HAVE_NPSOL
#@ s5: DakotaConfig=HAVE_NPSOL
#@ s3: DakotaConfig=HAVE_DOT
#@ s8: DakotaConfig=HAVE_DOT
#@ s4: DakotaConfig=HAVE_NLPQL
#@ s9: DakotaConfig=HAVE_NLPQL
#@ s0: UserMan=textbook_opt_multiobj1
#@ [taxonomy:start]
#@ s0: [analysis:Optimization]
#@ s0: [method:SQP]
#@ s0: [goal:Local]
#@ s0: [goal:BoundConstraints]
#@ s0: [variable:Continuous]
#@ s0: [model:Smooth]
#@ s0: [model:FirstDerivatives]
#@ [taxonomy:end]

# DAKOTA INPUT FILE - dakota_multiobj1.in	
# Dakota Input File: textbook_opt_multiobj1.in            #s0

# Unconstrained multiobjective optimization using the Textbook problem.
#
# The formulation is: minimize F
#                     s.t. x_l <= x <= x_u
#
# where F  = w1*f1 + w2*f2 + w3*f3
#       f1 = original textbook objective fcn
#       f2 = original textbook constraint 1
#       f3 = original textbook constraint 2

environment
  tabular_data
    tabular_data_file = 'textbook_opt_multiobj1.dat'	#s0

method
## (NPSOL requires a software license; if not available, try	      #s0
## conmin_frcg or optpp_q_newton instead)     			      #s0
  npsol_sqp         #s0,#s5
#  optpp_newton			#s1,#s6
#  conmin_frcg			#s2,#s7
#  dot_bfgs				  #s3,#s8
#  nlpql_sqp				#s4,#s9
    convergence_tolerance = 1.e-8

variables
  continuous_design = 2
    initial_point    0.9    1.1
    upper_bounds     5.8    2.9
    lower_bounds     0.5   -2.9
    descriptors      'x1'   'x2'

interface
  analysis_drivers = 'text_book'
    direct

responses
  objective_functions = 3
#    sense = "min" "max" "max"      #s5,#s6,#s7,#s8,#s9
  weights = .7 .2 .1
#  weights = .333 .333 .333
  analytic_gradients
#  numerical_gradients
#    method_source vendor
#    interval_type forward
#    fd_gradient_step_size = 1.e-6
  no_hessians                       #s0,#s2,#s3,#s4,#s5,#s7,#s8,#s9
#  analytic_hessians			          #s1,#s6
